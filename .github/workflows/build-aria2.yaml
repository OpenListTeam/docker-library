name: Build Aria2 Docker Image (Matrix)
on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Docker image name'
        required: false
        default: 'openlist-aria2'
      aria2_version:
        description: 'Aria2 version'
        required: false
        default: '1.37.0'
      DOCKERHUB_ORG_NAME:
        description: 'DockerHub organization name'
        required: false
        default: ''
      GHCR_ORG_NAME:
        description: 'GitHub Container Registry organization name'
        required: false
        default: ''

env:
  IMAGE_NAME: ${{ github.event.inputs.image_name || 'openlist-aria2' }}
  DOCKERHUB_ORG_NAME: ${{ github.event.inputs.dockerhub_org_name || vars.DOCKERHUB_ORG_NAME || github.repository_owner }}
  GHCR_ORG_NAME: ${{ github.event.inputs.ghcr_org_name || vars.DOCKERHUB_ORG_NAME || github.repository_owner }}
  GHCR_REGISTRY: ghcr.io
  ARIA2_VERSION: ${{ github.event.inputs.aria2_version || '1.37.0' }}

permissions:
  packages: write

jobs:
  build-aria2-image:
    name: Build Aria2 Docker Image (Matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: linux-amd64
            platforms: linux/amd64
            dockerfile: ./aria2/Dockerfile
          - name: linux-arm64
            platforms: linux/arm64
            dockerfile: ./aria2/Dockerfile
          - name: linux-arm-v7
            platforms: linux/arm/v7
            dockerfile: ./aria2/Dockerfile
          - name: linux-386
            platforms: linux/386
            dockerfile: ./aria2/Dockerfile
          - name: linux-arm-v6
            platforms: linux/arm/v6
            dockerfile: ./aria2/Dockerfile
          - name: linux-ppc64le
            platforms: linux/ppc64le
            dockerfile: ./aria2/Dockerfile
          - name: linux-riscv64
            platforms: linux/riscv64
            dockerfile: ./aria2/Dockerfile
          - name: linux-loong64
            platforms: linux/loong64
            dockerfile: ./aria2/Dockerfile.loong64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_ORG_NAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (${{ matrix.name }})
        uses: docker/build-push-action@v6
        id: build
        with:
          context: ./aria2
          file: ${{ matrix.dockerfile }}
          push: true
          pull: true
          no-cache: true
          build-args: |
            ARIA2_VERSION=${{ env.ARIA2_VERSION }}
          tags: |
            ${{ env.DOCKERHUB_ORG_NAME }}/${{ env.IMAGE_NAME }}
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG_NAME }}/${{ env.IMAGE_NAME }}
          platforms: ${{ matrix.platforms }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge manifests
    runs-on: ubuntu-latest
    needs: build-aria2-image
    steps:
      - name: Download all digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_ORG_NAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest list and push (DockerHub)
        working-directory: ${{ runner.temp }}/digests
        run: |
          echo "üîç Available digests :"
          ls -la
          # Collect all digests for DockerHub
          digests=$(find . -name 'digest-*' -exec cat {} \; | grep "${{ env.DOCKERHUB_ORG_NAME }}/${{ env.IMAGE_NAME }}" | sed 's|^.*@||')
          refs=""
          for digest in $digests; do
            refs="$refs ${{ env.DOCKERHUB_ORG_NAME }}/${{ env.IMAGE_NAME }}@${digest}"
          done
          docker buildx imagetools create \
            -t ${{ env.DOCKERHUB_ORG_NAME }}/${{ env.IMAGE_NAME }}:latest \
            $refs

      - name: Create manifest list and push (GHCR)
        working-directory: ${{ runner.temp }}/digests
        run: |
          digests=$(find . -name 'digest-*' -exec cat {} \; | grep "${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG_NAME }}/${{ env.IMAGE_NAME }}" | sed 's|^.*@||')
          refs=""
          for digest in $digests; do
            refs="$refs ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG_NAME }}/${{ env.IMAGE_NAME }}@${digest}"
          done
          docker buildx imagetools create \
            -t ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG_NAME }}/${{ env.IMAGE_NAME }}:latest \
            $refs

      - name: Inspect images
        run: |
          echo "üîç Inspecting DockerHub image..."
          docker buildx imagetools inspect ${{ env.DOCKERHUB_ORG_NAME }}/${{ env.IMAGE_NAME }}:latest
          echo "üîç Inspecting GHCR image..."
          docker buildx imagetools inspect ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_ORG_NAME }}/${{ env.IMAGE_NAME }}:latest